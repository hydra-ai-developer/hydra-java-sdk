/*
 * hydra.ai API
 * hydra.ai makes it easy to use A.I. inside workflows and your apps. You can use hydra.ai for text classification, named entity recognition and senitment analysis. You can create your own A.I. models or use some of our pre-built models.  This API supports creating, training and invoking A.I. models hosted in your hydra.ai workspace. Create an account at https://build.hydra.ai to get started. You get get your API key in the settings section.    
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@hydra.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LabelConfig;

/**
 * A model in the workspace
 */
@ApiModel(description = "A model in the workspace")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-07T21:14:11.959007Z[Etc/UTC]")
public class Model {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * model template reference
   */
  @JsonAdapter(TemplateRefEnum.Adapter.class)
  public enum TemplateRefEnum {
    MESSAGECLASSIFICATION("messageClassification"),
    
    NAMEDENTITYRECOGNITION("namedEntityRecognition"),
    
    SENTIMENTANALYSIS("sentimentAnalysis"),
    
    COMMONENTITYRECOGNITION("commonEntityRecognition"),
    
    INDUSTRYLABELTAGGER("industryLabelTagger"),
    
    BOXFORMDATA("boxFormData");

    private String value;

    TemplateRefEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateRefEnum fromValue(String value) {
      for (TemplateRefEnum b : TemplateRefEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateRefEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateRefEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateRefEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateRefEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_REF = "templateRef";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_REF)
  private TemplateRefEnum templateRef;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<LabelConfig> labels = null;


  public Model name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "Message classification model", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Model description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * a short description of the model
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a short description of the model")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Model templateRef(TemplateRefEnum templateRef) {
    
    this.templateRef = templateRef;
    return this;
  }

   /**
   * model template reference
   * @return templateRef
  **/
  @ApiModelProperty(required = true, value = "model template reference")

  public TemplateRefEnum getTemplateRef() {
    return templateRef;
  }


  public void setTemplateRef(TemplateRefEnum templateRef) {
    this.templateRef = templateRef;
  }


  public Model labels(List<LabelConfig> labels) {
    
    this.labels = labels;
    return this;
  }

  public Model addLabelsItem(LabelConfig labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<LabelConfig>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * provide label configurations only for custom models
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "provide label configurations only for custom models")

  public List<LabelConfig> getLabels() {
    return labels;
  }


  public void setLabels(List<LabelConfig> labels) {
    this.labels = labels;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.name, model.name) &&
        Objects.equals(this.description, model.description) &&
        Objects.equals(this.templateRef, model.templateRef) &&
        Objects.equals(this.labels, model.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, templateRef, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    templateRef: ").append(toIndentedString(templateRef)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

